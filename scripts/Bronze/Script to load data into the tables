-- ================================================
-- Script: Bulk Insert Data into bronze Layer
-- Purpose: Load data into bronze schema from CSV files,
-- show flow, catch errors, and display load duration.
-- Author: Osazuwa Micheal Kelvin
-- ================================================

-- Ensure correct database
-- \c data_warehouse;

-- ============================================================
-- Load bronze.crm_cust_info
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP;
end_time TIMESTAMP;
duration NUMERIC;
BEGIN
start_time := clock_timestamp();
RAISE NOTICE 'Starting data load for bronze.crm_cust_info...';

TRUNCATE bronze.crm_cust_info;
RAISE NOTICE 'Table truncated successfully.';

COPY bronze.crm_cust_info (
    cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
)
FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_crm\\cust_info.csv'
WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

end_time := clock_timestamp();
duration := EXTRACT(EPOCH FROM end_time - start_time);
RAISE NOTICE '‚úÖ Data loaded into bronze.crm_cust_info (%.2f seconds)', duration;


EXCEPTION
WHEN OTHERS THEN
RAISE WARNING '‚ö†Ô∏è Error loading bronze.crm_cust_info: %', SQLERRM;
END $$;

-- ============================================================
-- Load bronze.crm_prd_info
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP;
end_time TIMESTAMP;
duration NUMERIC;
BEGIN
start_time := clock_timestamp();
RAISE NOTICE 'Starting data load for bronze.crm_prd_info...';

TRUNCATE bronze.crm_prd_info;
RAISE NOTICE 'Table truncated successfully.';

COPY bronze.crm_prd_info (
    prd_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
)
FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_crm\\prd_info.csv'
WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

end_time := clock_timestamp();
duration := EXTRACT(EPOCH FROM end_time - start_time);
RAISE NOTICE '‚úÖ Data loaded into bronze.crm_prd_info (%.2f seconds)', duration;


EXCEPTION
WHEN OTHERS THEN
RAISE WARNING '‚ö†Ô∏è Error loading bronze.crm_prd_info: %', SQLERRM;
END $$;

-- ============================================================
-- Load bronze.crm_sales_details
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP;
end_time TIMESTAMP;
duration NUMERIC;
BEGIN
start_time := clock_timestamp();
RAISE NOTICE 'Starting data load for bronze.crm_sales_details...';

TRUNCATE bronze.crm_sales_details;
RAISE NOTICE 'Table truncated successfully.';

COPY bronze.crm_sales_details (
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
)
FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_crm\\sales_details.csv'
WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

end_time := clock_timestamp();
duration := EXTRACT(EPOCH FROM end_time - start_time);
RAISE NOTICE '‚úÖ Data loaded into bronze.crm_sales_details (%.2f seconds)', duration;


EXCEPTION
WHEN OTHERS THEN
RAISE WARNING '‚ö†Ô∏è Error loading bronze.crm_sales_details: %', SQLERRM;
END $$;

-- ============================================================
-- Load bronze.erp_cust_az12
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP;
end_time TIMESTAMP;
duration NUMERIC;
BEGIN
start_time := clock_timestamp();
RAISE NOTICE 'Starting data load for bronze.erp_cust_az12...';

TRUNCATE bronze.erp_cust_az12;
RAISE NOTICE 'Table truncated successfully.';

COPY bronze.erp_cust_az12 (
    CID,
    BDATE,
    GEN
)
FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_erp\\CUST_AZ12.csv'
WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

end_time := clock_timestamp();
duration := EXTRACT(EPOCH FROM end_time - start_time);
RAISE NOTICE '‚úÖ Data loaded into bronze.erp_cust_az12 (%.2f seconds)', duration;


EXCEPTION
WHEN OTHERS THEN
RAISE WARNING '‚ö†Ô∏è Error loading bronze.erp_cust_az12: %', SQLERRM;
END $$;

-- ============================================================
-- Load bronze.erm_loc_a101
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP;
end_time TIMESTAMP;
duration NUMERIC;
BEGIN
start_time := clock_timestamp();
RAISE NOTICE 'Starting data load for bronze.erm_loc_a101...';

TRUNCATE bronze.erm_loc_a101;
RAISE NOTICE 'Table truncated successfully.';

COPY bronze.erm_loc_a101 (
    CID,
    CNTRY
)
FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_erp\\LOC_A101.csv'
WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

end_time := clock_timestamp();
duration := EXTRACT(EPOCH FROM end_time - start_time);
RAISE NOTICE '‚úÖ Data loaded into bronze.erm_loc_a101 (%.2f seconds)', duration;


EXCEPTION
WHEN OTHERS THEN
RAISE WARNING '‚ö†Ô∏è Error loading bronze.erm_loc_a101: %', SQLERRM;
END $$;

-- ============================================================
-- Load bronze.erm_px_cat_g1v2
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP;
end_time TIMESTAMP;
duration NUMERIC;
BEGIN
start_time := clock_timestamp();
RAISE NOTICE 'Starting data load for bronze.erm_px_cat_g1v2...';

TRUNCATE bronze.erm_px_cat_g1v2;
RAISE NOTICE 'Table truncated successfully.';

COPY bronze.erm_px_cat_g1v2 (
    ID,
    CAT,
    SUBCAT,
    MAINTENANCE
)
FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_erp\\PX_CAT_G1V2.csv'
WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

end_time := clock_timestamp();
duration := EXTRACT(EPOCH FROM end_time - start_time);
RAISE NOTICE '‚úÖ Data loaded into bronze.erm_px_cat_g1v2 (%.2f seconds)', duration;


EXCEPTION
WHEN OTHERS THEN
RAISE WARNING '‚ö†Ô∏è Error loading bronze.erm_px_cat_g1v2: %', SQLERRM;
END $$;

-- ============================================================
-- FINAL VERIFICATION
-- ============================================================
DO $$
BEGIN
    RAISE NOTICE 'üéØ All data load steps executed successfully.';
END $$;
