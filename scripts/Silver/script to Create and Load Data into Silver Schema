-- ============================================================
-- Script: Create and Load Data into Silver Schema from Bronze
-- Purpose: Create six tables in silver schema and load data
-- Author: Osazuwa Micheal Kelvin
-- ============================================================

-- Ensure correct database
-- \c data_warehouse;

-- ============================================================
-- Step 1: Create silver schema and tables
-- ============================================================

CREATE SCHEMA IF NOT EXISTS silver;

CREATE TABLE IF NOT EXISTS silver.crm_cust_info (
    cst_id INT,
    cst_key VARCHAR(20),
    cst_firstname VARCHAR(20),
    cst_lastname VARCHAR(20),
    cst_marital_status VARCHAR(6),
    cst_gndr VARCHAR(6),
    cst_create_date DATE,
    dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.crm_prd_info (
    prd_id INT,
    prd_key VARCHAR(20),
    prd_nm VARCHAR(50),
    prd_cost INT,
    prd_line VARCHAR(30),
    prd_start_dt DATE,
    prd_end_dt DATE,
    dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.crm_sales_details (
    sls_ord_num VARCHAR(20),
    sls_prd_key VARCHAR(20),
    sls_cust_id INT,
    sls_order_dt DATE,
    sls_ship_dt DATE,
    sls_due_dt DATE,
    sls_sales INT,
    sls_quantity INT,
    sls_price NUMERIC(10,2),
    dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.erp_cust_az12 (
    CID TEXT,
    BDATE DATE,
    GEN VARCHAR(6),
    dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.erm_loc_a101 (
    CID TEXT,
    CNTRY VARCHAR(50),
    dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.erm_px_cat_g1v2 (
    ID TEXT,
    CAT VARCHAR(50),
    SUBCAT VARCHAR(50),
    MAINTENANCE VARCHAR(30),
    dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================
-- Step 2: Load data from Bronze schema into Silver schema
-- ============================================================

-- Load silver.crm_cust_info
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting load for silver.crm_cust_info from bronze...';

    TRUNCATE silver.crm_cust_info;
    RAISE NOTICE 'Table truncated successfully.';

    INSERT INTO silver.crm_cust_info (
        cst_id, cst_key, cst_firstname, cst_lastname, 
        cst_marital_status, cst_gndr, cst_create_date
    )
    SELECT
        cst_id,
        cst_key,
        INITCAP(cst_firstname),
        INITCAP(cst_lastname),
        INITCAP(cst_marital_status),
        INITCAP(cst_gndr),
        cst_create_date
    FROM bronze.crm_cust_info;

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Loaded silver.crm_cust_info (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.crm_cust_info: %', SQLERRM;
END $$;

-- Load silver.crm_prd_info
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting load for silver.crm_prd_info from bronze...';

    TRUNCATE silver.crm_prd_info;
    RAISE NOTICE 'Table truncated successfully.';

    INSERT INTO silver.crm_prd_info (
        prd_id, prd_key, prd_nm, prd_cost, prd_line, prd_start_dt, prd_end_dt
    )
    SELECT
        prd_id, prd_key, INITCAP(prd_nm), prd_cost, INITCAP(prd_line),
        prd_start_dt, prd_end_dt
    FROM bronze.crm_prd_info;

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Loaded silver.crm_prd_info (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.crm_prd_info: %', SQLERRM;
END $$;

-- Load silver.crm_sales_details
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting load for silver.crm_sales_details from bronze...';

    TRUNCATE silver.crm_sales_details;
    RAISE NOTICE 'Table truncated successfully.';

    INSERT INTO silver.crm_sales_details (
        sls_ord_num, sls_prd_key, sls_cust_id, sls_order_dt,
        sls_ship_dt, sls_due_dt, sls_sales, sls_quantity, sls_price
    )
    SELECT
        sls_ord_num, sls_prd_key, sls_cust_id,
        sls_order_dt, sls_ship_dt, sls_due_dt,
        sls_sales, sls_quantity, sls_price
    FROM bronze.crm_sales_details
    WHERE sls_sales IS NOT NULL; -- Basic quality check

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Loaded silver.crm_sales_details (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.crm_sales_details: %', SQLERRM;
END $$;

-- Load silver.erp_cust_az12
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting load for silver.erp_cust_az12 from bronze...';

    TRUNCATE silver.erp_cust_az12;
    RAISE NOTICE 'Table truncated successfully.';

    INSERT INTO silver.erp_cust_az12 (CID, BDATE, GEN)
    SELECT CID::TEXT, BDATE, INITCAP(GEN)
    FROM bronze.erp_cust_az12;

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Loaded silver.erp_cust_az12 (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.erp_cust_az12: %', SQLERRM;
END $$;

-- Load silver.erm_loc_a101
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting load for silver.erm_loc_a101 from bronze...';

    TRUNCATE silver.erm_loc_a101;
    RAISE NOTICE 'Table truncated successfully.';

    INSERT INTO silver.erm_loc_a101 (CID, CNTRY)
    SELECT CID::TEXT, INITCAP(CNTRY)
    FROM bronze.erm_loc_a101;

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Loaded silver.erm_loc_a101 (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.erm_loc_a101: %', SQLERRM;
END $$;

-- Load silver.erm_px_cat_g1v2
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting load for silver.erm_px_cat_g1v2 from bronze...';

    TRUNCATE silver.erm_px_cat_g1v2;
    RAISE NOTICE 'Table truncated successfully.';

    INSERT INTO silver.erm_px_cat_g1v2 (ID, CAT, SUBCAT, MAINTENANCE)
    SELECT ID::TEXT, INITCAP(CAT), INITCAP(SUBCAT), INITCAP(MAINTENANCE)
    FROM bronze.erm_px_cat_g1v2;

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Loaded silver.erm_px_cat_g1v2 (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.erm_px_cat_g1v2: %', SQLERRM;
END $$;

-- ============================================================
-- FINAL VERIFICATION
-- ============================================================
DO $$
BEGIN
    RAISE NOTICE 'üéØ All silver data loaded successfully from bronze layer.';
END $$;
