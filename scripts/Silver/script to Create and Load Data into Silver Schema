-- ============================================================
-- Script: Optimized Create, Clean, and Load Data into Silver Schema
-- Purpose: 
--   â€¢ Create the silver schema and six refined tables.
--   â€¢ Load curated data from the bronze layer into the silver layer.
--   â€¢ Perform data cleaning and advanced transformations including:
--       - Trimming of string fields.
--       - Standardization of categorical codes (gender, marital status, etc.).
--       - Null value handling and replacement.
--       - Logical correction of numerical inconsistencies.
--       - Computation of derived columns (e.g., product end date).
--   â€¢ Log load durations for each table.
-- Author: Osazuwa Micheal Kelvin
-- ============================================================

-- Ensure correct database
-- \c data_warehouse;

-- ============================================================
-- Step 1: Create silver schema and tables
-- ============================================================

CREATE SCHEMA IF NOT EXISTS silver;

CREATE TABLE IF NOT EXISTS silver.crm_cust_info (
cst_id INT,
cst_key VARCHAR(20),
cst_firstname VARCHAR(20),
cst_lastname VARCHAR(20),
cst_marital_status VARCHAR(10),
cst_gndr VARCHAR(10),
cst_create_date DATE,
dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.crm_prd_info (
prd_id INT,
prd_key VARCHAR(20),
cat_id VARCHAR(20),
prd_nm VARCHAR(50),
prd_cost INT,
prd_line VARCHAR(30),
prd_start_dt DATE,
prd_end_dt DATE,
dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.crm_sales_details (
sls_ord_num VARCHAR(20),
sls_prd_key VARCHAR(20),
sls_cust_id INT,
sls_order_dt DATE,
sls_ship_dt DATE,
sls_due_dt DATE,
sls_sales NUMERIC(12,2),
sls_quantity NUMERIC(12,2),
sls_price NUMERIC(12,2),
dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.erp_cust_az12 (
cid TEXT,
bdate DATE,
gen VARCHAR(6),
dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.erm_loc_a101 (
cid TEXT,
cntry VARCHAR(50),
dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS silver.erm_px_cat_g1v2 (
id TEXT,
cat VARCHAR(50),
subcat VARCHAR(50),
maintenance VARCHAR(30),
dwh_create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================
-- Step 2: Load data from Bronze schema into Silver schema
-- ============================================================

-- ================= CRM CUSTOMER INFO =======================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'ðŸš€ Loading silver.crm_cust_info...';
TRUNCATE silver.crm_cust_info;

INSERT INTO silver.crm_cust_info (
    cst_id, cst_key, cst_firstname, cst_lastname,
    cst_marital_status, cst_gndr, cst_create_date
)
SELECT 
    cst_id,
    TRIM(cst_key),
    TRIM(cst_firstname),
    TRIM(cst_lastname),
    CASE 
        WHEN TRIM(cst_marital_status) = 'M' THEN 'Married'
        WHEN TRIM(cst_marital_status) = 'S' THEN 'Single'
        ELSE 'N/A'
    END,
    CASE 
        WHEN TRIM(cst_gndr) = 'M' THEN 'Male'
        WHEN TRIM(cst_gndr) = 'F' THEN 'Female'
        ELSE 'Others'
    END,
    cst_create_date
FROM (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS rn
    FROM bronze.crm_cust_info
) t
WHERE rn = 1;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE 'âœ… silver.crm_cust_info loaded (%.2f sec)', duration;


END $$;

-- ================= CRM PRODUCT INFO =======================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'ðŸš€ Loading silver.crm_prd_info...';
TRUNCATE silver.crm_prd_info;

INSERT INTO silver.crm_prd_info (
    prd_id, cat_id, prd_key, prd_nm, prd_cost, prd_line, prd_start_dt, prd_end_dt
)
SELECT
    prd_id,
    REPLACE(SUBSTRING(TRIM(prd_key), 1, 5), '-', '_') AS cat_id,
    SUBSTRING(TRIM(prd_key), 7) AS prd_key,
    TRIM(prd_nm),
    COALESCE(prd_cost, 0),
    CASE 
        WHEN TRIM(prd_line) = 'M' THEN 'Mountain'
        WHEN TRIM(prd_line) = 'R' THEN 'Road'
        WHEN TRIM(prd_line) = 'S' THEN 'Other_sales'
        WHEN TRIM(prd_line) = 'T' THEN 'Touring'
        ELSE 'N/A'
    END,
    prd_start_dt,
    LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS prd_end_dt
FROM bronze.crm_prd_info;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE 'âœ… silver.crm_prd_info loaded (%.2f sec)', duration;


END $$;

-- ================= CRM SALES DETAILS =======================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'ðŸš€ Loading silver.crm_sales_details...';
TRUNCATE silver.crm_sales_details;

INSERT INTO silver.crm_sales_details (
    sls_ord_num, sls_prd_key, sls_cust_id,
    sls_order_dt, sls_ship_dt, sls_due_dt,
    sls_sales, sls_quantity, sls_price
)
SELECT
    TRIM(sls_ord_num),
    TRIM(sls_prd_key),
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,

    -- Clean sls_sales
    CASE 
        WHEN sls_sales IS NULL THEN ABS(sls_quantity * sls_price)
        WHEN sls_sales < 0 THEN ABS(sls_sales)
        WHEN sls_quantity IS NOT NULL AND sls_price IS NOT NULL
             AND sls_sales <> sls_quantity * sls_price
             THEN ABS(sls_quantity * sls_price)
        ELSE sls_sales
    END AS sls_sales,

    -- Clean sls_quantity
    CASE 
        WHEN sls_quantity IS NULL THEN ABS(sls_sales / NULLIF(sls_price, 0))
        WHEN sls_quantity < 0 THEN ABS(sls_quantity)
        ELSE sls_quantity
    END AS sls_quantity,

    -- Clean sls_price
    CASE 
        WHEN sls_price IS NULL THEN ABS(sls_sales / NULLIF(sls_quantity, 0))
        WHEN sls_price < 0 THEN ABS(sls_price)
        ELSE sls_price
    END AS sls_price
FROM bronze.crm_sales_details;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE 'âœ… silver.crm_sales_details loaded (%.2f sec)', duration;


END $$;

-- ================= ERP CUSTOMER AZ12 =======================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'ðŸš€ Loading silver.erp_cust_az12...';
TRUNCATE silver.erp_cust_az12;

INSERT INTO silver.erp_cust_az12 (cid, bdate, gen)
SELECT
    CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4) ELSE cid END,
    CASE 
        WHEN bdate >= CURRENT_DATE THEN NULL
        ELSE bdate
    END AS bdate,
    gen
FROM bronze.erp_cust_az12;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE 'âœ… silver.erp_cust_az12 loaded (%.2f sec)', duration;


END $$;

-- ================= ERM LOCATION A101 =======================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'ðŸš€ Loading silver.erm_loc_a101...';
TRUNCATE silver.erm_loc_a101;

INSERT INTO silver.erm_loc_a101 (cid, cntry)
SELECT 
    COALESCE(TRIM(cid), 'N/A'),
    TRIM(cntry)
FROM bronze.erm_loc_a101;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE 'âœ… silver.erm_loc_a101 loaded (%.2f sec)', duration;


END $$;

-- ================= ERM PRODUCT CATEGORY G1V2 =======================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'ðŸš€ Loading silver.erm_px_cat_g1v2...';
TRUNCATE silver.erm_px_cat_g1v2;

INSERT INTO silver.erm_px_cat_g1v2 (id, cat, subcat, maintenance)
SELECT
    TRIM(id),
    TRIM(cat),
    TRIM(subcat),
    TRIM(maintenance)
FROM bronze.erm_px_cat_g1v2;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE 'âœ… silver.erm_px_cat_g1v2 loaded (%.2f sec)', duration;


END $$;

-- ============================================================
-- FINAL VERIFICATION
-- ============================================================
DO $$
BEGIN
    RAISE NOTICE 'ðŸŽ¯ All silver data loaded successfully from bronze layer.';
END $$;
