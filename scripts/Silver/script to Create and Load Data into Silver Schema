-- ============================================================
-- Script: Create and Load Data into Silver Schema
-- Purpose: Create six tables and bulk load CSV data into them
-- Author: Osazuwa Micheal Kelvin
-- ============================================================

-- Ensure correct database
-- \c data_warehouse;

-- ============================================================
-- Step 1: Create silver schema and tables
-- ============================================================

-- Ensure that the 'silver' schema exists before creating the tables
CREATE SCHEMA IF NOT EXISTS silver;

CREATE TABLE IF NOT EXISTS silver.crm_cust_info (
    cst_id INT, 					-- Unique numeric ID for each customer
    cst_key VARCHAR(20), 			-- Optional key or reference code for the customer
    cst_firstname VARCHAR(20), 		-- Customer's first name
    cst_lastname VARCHAR(20), 	    -- Customer's last name
    cst_marital_status VARCHAR(6),  -- Marital status (e.g., 'Single', 'Married')
    cst_gndr VARCHAR(6), 			-- Gender (e.g., 'Male', 'Female')
    cst_create_date DATE 			-- Date the customer record was created
);

CREATE TABLE IF NOT EXISTS silver.crm_prd_info (
    prd_id INT,                 -- Unique product ID (integer)
    prd_key VARCHAR(20),        -- Unique product key or code
    prd_nm VARCHAR(50),         -- Product name
    prd_cost INT,     			 -- Product cost 
    prd_line VARCHAR(30),       -- Product line or category
    prd_start_dt DATE,          -- Product start/launch date
    prd_end_dt DATE             -- Product end/discontinuation date
);

CREATE TABLE IF NOT EXISTS silver.crm_sales_details (
    sls_ord_num VARCHAR(20),       -- Unique sales order number
    sls_prd_key VARCHAR(20),       -- Product key 
    sls_cust_id INT,               -- Customer ID 
    sls_order_dt DATE,             -- Date when the order was placed
    sls_ship_dt DATE,              -- Date when the order was shipped
    sls_due_dt DATE,               -- Due date for order delivery or payment
    sls_sales INT,       			-- Total sales amount 
    sls_quantity INT,              -- Quantity of product sold
    sls_price NUMERIC(10,2)        -- Unit price of the product
);

CREATE TABLE IF NOT EXISTS silver.erp_cust_az12 (
    CID   TEXT,          -- Customer ID (unique numeric identifier)
    BDATE DATE,         -- Customer Birth Date
    GEN   VARCHAR(6)    -- Gender 
);

CREATE TABLE IF NOT EXISTS silver.erm_loc_a101 (
    CID   TEXT,           -- Customer ID 
    CNTRY VARCHAR(50)    -- Country name 
);

CREATE TABLE IF NOT EXISTS silver.erm_px_cat_g1v2 (
    ID            TEXT,            -- Unique identifier for each record
    CAT           VARCHAR(50),    -- Main product category 
    SUBCAT        VARCHAR(50),    -- Subcategory under the main category 
    MAINTENANCE   VARCHAR(30)     -- Maintenance type or requirement
);

-- ============================================================
-- Step 2: Bulk Load Data into silver Tables
-- ============================================================

-- ============================================================
-- Load silver.crm_cust_info
-- ============================================================
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting data load for silver.crm_cust_info...';

    TRUNCATE silver.crm_cust_info;
    RAISE NOTICE 'Table truncated successfully.';

    COPY silver.crm_cust_info (
        cst_id,
        cst_key,
        cst_firstname,
        cst_lastname,
        cst_marital_status,
        cst_gndr,
        cst_create_date
    )
    FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_crm\\cust_info.csv'
    WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Data loaded into silver.crm_cust_info (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.crm_cust_info: %', SQLERRM;
END $$;

-- ============================================================
-- Load silver.crm_prd_info
-- ============================================================
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting data load for silver.crm_prd_info...';

    TRUNCATE silver.crm_prd_info;
    RAISE NOTICE 'Table truncated successfully.';

    COPY silver.crm_prd_info (
        prd_id,
        prd_key,
        prd_nm,
        prd_cost,
        prd_line,
        prd_start_dt,
        prd_end_dt
    )
    FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_crm\\prd_info.csv'
    WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Data loaded into silver.crm_prd_info (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.crm_prd_info: %', SQLERRM;
END $$;

-- ============================================================
-- Load silver.crm_sales_details
-- ============================================================
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting data load for silver.crm_sales_details...';

    TRUNCATE silver.crm_sales_details;
    RAISE NOTICE 'Table truncated successfully.';

    COPY silver.crm_sales_details (
        sls_ord_num,
        sls_prd_key,
        sls_cust_id,
        sls_order_dt,
        sls_ship_dt,
        sls_due_dt,
        sls_sales,
        sls_quantity,
        sls_price
    )
    FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_crm\\sales_details.csv'
    WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Data loaded into silver.crm_sales_details (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.crm_sales_details: %', SQLERRM;
END $$;

-- ============================================================
-- Load silver.erp_cust_az12
-- ============================================================
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting data load for silver.erp_cust_az12...';

    TRUNCATE silver.erp_cust_az12;
    RAISE NOTICE 'Table truncated successfully.';

    COPY silver.erp_cust_az12 (
        CID,
        BDATE,
        GEN
    )
    FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_erp\\CUST_AZ12.csv'
    WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Data loaded into silver.erp_cust_az12 (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.erp_cust_az12: %', SQLERRM;
END $$;

-- ============================================================
-- Load silver.erm_loc_a101
-- ============================================================
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting data load for silver.erm_loc_a101...';

    TRUNCATE silver.erm_loc_a101;
    RAISE NOTICE 'Table truncated successfully.';

    COPY silver.erm_loc_a101 (
        CID,
        CNTRY
    )
    FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_erp\\LOC_A101.csv'
    WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Data loaded into silver.erm_loc_a101 (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.erm_loc_a101: %', SQLERRM;
END $$;

-- ============================================================
-- Load silver.erm_px_cat_g1v2
-- ============================================================
DO $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    duration NUMERIC;
BEGIN
    start_time := clock_timestamp();
    RAISE NOTICE 'Starting data load for silver.erm_px_cat_g1v2...';

    TRUNCATE silver.erm_px_cat_g1v2;
    RAISE NOTICE 'Table truncated successfully.';

    COPY silver.erm_px_cat_g1v2 (
        ID,
        CAT,
        SUBCAT,
        MAINTENANCE
    )
    FROM 'C:\\Users\\MICHAEL VOLT\\Downloads\\sql-data-warehouse-project\\sql-data-warehouse-project\\datasets\\source_erp\\PX_CAT_G1V2.csv'
    WITH (FORMAT CSV, HEADER TRUE, DELIMITER ',', NULL '', ENCODING 'UTF8');

    end_time := clock_timestamp();
    duration := EXTRACT(EPOCH FROM end_time - start_time);
    RAISE NOTICE '‚úÖ Data loaded into silver.erm_px_cat_g1v2 (%.2f seconds)', duration;

EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ö†Ô∏è Error loading silver.erm_px_cat_g1v2: %', SQLERRM;
END $$;

-- ============================================================
-- FINAL VERIFICATION
-- ============================================================
DO $$
BEGIN
    RAISE NOTICE 'üéØ All data load steps executed successfully.';
END $$;
