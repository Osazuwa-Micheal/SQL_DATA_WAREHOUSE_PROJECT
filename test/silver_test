-- ============================================================
-- Script: Silver Layer Data Quality Checks
-- Purpose:
-- • Perform detailed quality checks on all Silver tables.
-- • Validate data consistency, integrity, and transformations.
-- • Include timing logs and per-table validation breakdown.
-- Author: Osazuwa Micheal Kelvin
-- ============================================================

-- ============================================================
-- Step 1: CRM CUSTOMER INFO QUALITY CHECK
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'Checking data quality for silver.crm_cust_info...';

-- Check for NULLs or Duplicates in Primary Key
RAISE NOTICE 'Checking for NULLs or duplicate cst_id...';
SELECT cst_id, COUNT(*) 
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- Check for Unwanted Spaces
RAISE NOTICE 'Checking for unwanted spaces in cst_key...';
SELECT cst_key 
FROM silver.crm_cust_info
WHERE cst_key != TRIM(cst_key);

-- Marital Status Validation
RAISE NOTICE 'Distinct marital status values:';
SELECT DISTINCT cst_marital_status 
FROM silver.crm_cust_info;

-- Gender Validation
RAISE NOTICE 'Distinct gender values:';
SELECT DISTINCT cst_gndr 
FROM silver.crm_cust_info;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE '✅ silver.crm_cust_info quality check completed (%.2f sec)', duration;

END $$;

-- ============================================================
-- Step 2: CRM PRODUCT INFO QUALITY CHECK
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'Checking data quality for silver.crm_prd_info...';

-- Check for NULLs or Duplicates in Primary Key
RAISE NOTICE 'Checking for NULLs or duplicate prd_id...';
SELECT prd_id, COUNT(*) 
FROM silver.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- Check for Unwanted Spaces
RAISE NOTICE 'Checking for unwanted spaces in product name...';
SELECT prd_nm 
FROM silver.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

-- Check for Invalid or Missing Cost
RAISE NOTICE 'Checking for invalid product cost values...';
SELECT prd_id, prd_cost
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

-- Product Line Standardization
RAISE NOTICE 'Distinct product line values:';
SELECT DISTINCT prd_line
FROM silver.crm_prd_info;

-- Date Order Validation
RAISE NOTICE 'Checking invalid date orders (start > end)...';
SELECT *
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE '✅ silver.crm_prd_info quality check completed (%.2f sec)', duration;

END $$;

-- ============================================================
-- Step 3: CRM SALES DETAILS QUALITY CHECK
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'Checking data quality for silver.crm_sales_details...';

-- Check Invalid Date Orders
RAISE NOTICE 'Checking invalid date orders (order > ship/due)...';
SELECT *
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt 
   OR sls_order_dt > sls_due_dt;

-- Sales Calculation Validation
RAISE NOTICE 'Checking for sales calculation inconsistencies...';
SELECT DISTINCT 
    sls_sales, sls_quantity, sls_price 
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
   OR sls_sales IS NULL 
   OR sls_quantity IS NULL 
   OR sls_price IS NULL
   OR sls_sales <= 0 
   OR sls_quantity <= 0 
   OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE '✅ silver.crm_sales_details quality check completed (%.2f sec)', duration;

END $$;

-- ============================================================
-- Step 4: ERP CUSTOMER AZ12 QUALITY CHECK
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'Checking data quality for silver.erp_cust_az12...';

-- Birthdate Range Check
RAISE NOTICE 'Checking invalid or out-of-range birthdates...';
SELECT DISTINCT bdate 
FROM silver.erp_cust_az12
WHERE bdate > CURRENT_DATE;

-- Gender Standardization
RAISE NOTICE 'Distinct gender values:';
SELECT DISTINCT gen 
FROM silver.erp_cust_az12;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE '✅ silver.erp_cust_az12 quality check completed (%.2f sec)', duration;

END $$;

-- ============================================================
-- Step 5: ERP LOCATION A101 QUALITY CHECK
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'Checking data quality for silver.erp_loc_a101...';

-- Country Standardization
RAISE NOTICE 'Distinct country values:';
SELECT DISTINCT cntry 
FROM silver.erp_loc_a101
ORDER BY cntry;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE '✅ silver.erp_loc_a101 quality check completed (%.2f sec)', duration;

END $$;

-- ============================================================
-- Step 6: ERP PRODUCT CATEGORY G1V2 QUALITY CHECK
-- ============================================================
DO $$
DECLARE
start_time TIMESTAMP := clock_timestamp();
duration NUMERIC;
BEGIN
RAISE NOTICE 'Checking data quality for silver.erp_px_cat_g1v2...';

-- Check for Unwanted Spaces
RAISE NOTICE 'Checking for unwanted spaces in text fields...';
SELECT *
FROM silver.erp_px_cat_g1v2
WHERE cat != TRIM(cat)
   OR subcat != TRIM(subcat)
   OR maintenance != TRIM(maintenance);

-- Maintenance Category Validation
RAISE NOTICE 'Distinct maintenance values:';
SELECT DISTINCT maintenance 
FROM silver.erp_px_cat_g1v2;

duration := EXTRACT(EPOCH FROM clock_timestamp() - start_time);
RAISE NOTICE '✅ silver.erp_px_cat_g1v2 quality check completed (%.2f sec)', duration;

END $$;

-- ============================================================
-- FINAL SUMMARY
-- ============================================================
DO $$
BEGIN
    RAISE NOTICE 'TEST COMPLETED';
END $$;
